openapi: 3.0.3

info:
  version: 0.0.1
  title: 'Blog RESTful API'
  description: Blog RESTful API
  termsOfService: http://swagger.io/terms/
  license:
    name: MIT
    url: LICENCE

tags:
  - name: Posts
    description: Everything about Posts
  - name: Search
    description: Everything about Search

servers:
  - url: http://localhost:8080/api
    description: 'DEV: Please configure according to your local environment.'
  - url: https://sgdev-avoristech-challenge.herokuapp.com/api
    description: 'STAGING: Testing Server.'

paths:
  /post:
    get:
      tags:
        - Posts
      summary: Get all Posts
      responses:
        200:
          description: A JSON array of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        404:
          description: Endpoint no found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Posts
      summary: Create a hotel
      responses:
        200:
          description: A new hotel have been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: No post found for the provided `postId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /post/{postId}:
    parameters:
      - name: hotelId
        description: The unique identifier of the hotel
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PostId'
    get:
      tags:
        - Hotels
      summary: Read a hotel
      responses:
        200:
          description: The hotel corresponding to the provided `postId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: No hotel found for the provided `postId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /search:
    post:
      tags:
        - Search
      summary: Gets a unique identifier attributed to the search for a hotel
      responses:
        200:
          description: Identifier attributed to the search for a post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchId'
        404:
          description: No identifier found for the provided `searchId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    PostId:
      description: The unique identifier of a post
      type: string
    Post:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PostId'
        name:
          type: string
      required:
        - id
        - title
        - content
    Booking:
      type: object
      properties:
        id:
          type: integer
    SearchId:
      description: The unique identifier attributed to the search for a post
      type: string
    SearchRequest:
      type: object
      properties:
        portId:
          $ref: '#/components/schemas/PostId'
        checkIn:
          type: string
        checkOut:
          type: string
        ages:
          type: array
          example: [30, 29, 1, 3]
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human-readable error message
          type: string
